# Propiedades de configuracion de la Aplicacion
# ------------------------------------------------------
#Especificar el nombre de la aplicacion, el acronimo oficial, el contexto web y la url del equipo local donde se estaria accediendo (embedded, standalone, etc.)
app.title=Sistema de Recursos Humanos
app.name=sireh
app.webCtxRoot=sireh
#app.webCtxRoot.WebAdmin=scm-admin
app.url=http://localhost:8988/sireh

#Especificar el nombre del paquete base a partir del cual se generan los paquetes de las clases (dao, data, model, service, control, etc.)
base.package=gob.shcp.sireh

#Especificar para cada componente: "true" si la aplicacion lo utiliza, "false" en caso contrario
#catalog: AdmonCat - Componente para la administracion de catalogos de la aplicacion
#batch:   BatchMgr - Componente para la ejecucion y administracion de procesos masivos
#bpm:     fsnjBPM  - Componente para la ejecucion y administracion de los procesos de negocio
#ccpki:   CCPKI    - Componente para el manejo de operaciones criptograficas de clave publica
#intweb:  IntWeb   - Componente para la integracion de aplicaciones web a partir de su UI
#jcr:     fsnJCR   - Componente para la administracion de contenido jerarquico
use.catalog=true
use.batch=false
use.bpm=false
use.ccpki=false
use.intweb=false
use.jcr=false
use.ws=true

#Especificar si el componente de catalogos fue seleccionado, "true" si genera la configuracion de catalogos, "false" en caso contrario
#tables: Nombre de las tablas que se desea configurar como catalogos, separados por comas.
scaffold.catalog=true
admoncat.tables=

#Especificar la url, usuario y contrase\u00f1a de la conexion de base de datos en el ambiente de desarrollo, asi como el nombre JNDI del DataSource
db.url=jdbc:oracle:thin:@172.22.45.14:1522:EOM2
db.usr=FACTOR_HUMANO
db.pwd=shcp2013
datasource.jndi=jdbc/SIREHDS





# Propiedades por defecto
# ------------------------------------------------------
#Especificar la url de la pagina de bienvenida de la aplicacion, asi como la url para salir de la aplicacion (en ambiente local)
seg.home.url=${app.url}/home.do
seg.single.signoff.url=${app.url}/signoff.do

#Especificar el tipo de servicio de configuracion que utiliza la aplicacion (FSN ConfigurationService)
config.bean=defaultConfigurationService

#Especificar el tipo de servicio de identidad que utiliza la aplicacion (FSN IdentityService) y la url de acceso del ambiente de desarrollo
identity.bean=customIdentityService
identity.service.url=http://172.20.7.71:7977/seguridad/service/identityService

#Especificar el tipo de servicio de autorizacion que utiliza la aplicacion (FSN AuthorizationService) y la url de acceso del ambiente de desarollo
auth.bean=customAuthorizationService
auth.service.url=http://172.20.7.71:7977/seguridad/service/authorizationService

#Especificar el tipo de servicio de consulta de dimensiones del usuario que utiliza la aplicacion (FSN UserDimensionService) y la url de acceso del ambiente de desarrollo
dimension.bean=customUserDimensionService
dimension.service.url=http://172.20.7.71:7977/seguridad/service/userDimensionService

#Especificar para cada servicio: "true" si la aplicacion lo utiliza, "false" en caso contrario
#auditing:  Servicio de auditoria sobre las operaciones del servicio que han sido configuradas
#profiling: Servicio de monitoreo de rendimiento sobre las operaciones de los servicios configurados
disable.auditing=true
disable.profiling=true

#Seleccionar solo un servicio de persistencia: "true" si es el que se utiliza, "false" en caso contrario
#jdbc:      Manejo de persistencia por JDBC (queries ansi sql sin archivos de configuracion)
#ibatis:    Manejo de persistencia por iBatis (queries ansi sql definidos en archivos de configuracion)
#hibernate: Manejo de persistencia por Hibernate (mapeo de entidades y relaciones en archivos de configuracion)
disable.jdbc=false
disable.ibatis=true
disable.hibernate=true

#Especifica para los servicios de persistencia seleccionados: "true" si genera el codigo de la capa de datos y modelo, "false" en caso contrario
scaffold.data=false
scaffold.model=false

#Establecer la url base para los servicios de PKI y la url base de los recursos web en el ambiente de desarrollo 
pki.service.url=http://172.20.7.74:7970/pki-ws/service
pki.web.url=http://172.20.7.74:7970/pki-web

#Establecer el tipo de servicio JCR, usuario, password y configuracion de conexion (local el nombre JNDI del DataSource de la BD de desarrollo o remoto la url de acceso WebDAV de desarrollo)
#jndi:   Uso de repositorio local a la aplicacion de negocio (acceso a traves de un recurso JNDI dedicado)
#WebDAV: Uso de repositorio remoto compartido para varias aplicaciones de negocio (acceso a traves de un servicio WebDAV)
jcr.repository=jndi
jcr.usr=user
jcr.pwd=password
jcr.datasource.jndi=jdbc/jcrDS
jcr.url=





# Propiedades de conexion al repositorio SVN y ambiente local
# ------------------------------------------------------
svn.url=http://172.22.25.96/svn/shcp/tool/mst/fsnTest/source/trunk
svn.usr=user.scm
svn.pwd=Rscm0

revert.applibs=false

#Especificar la ruta donde se genera la estructura de la aplicacion
app.home=./../..

#Especificar usuario y password de la consola de administracion del servidor de aplicaciones locales (standalone) para realizar el deploy de la aplicacion por script
deploy.usr=oc4jadmin
deploy.pwd=oc4jadmin
