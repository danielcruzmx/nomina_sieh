<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:s="http://www.fsn.shcp.gob/schema/service"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                           http://www.fsn.shcp.gob/schema/service http://www.fsn.shcp.gob/schema/service/service.xsd">

    <!-- QUERY DEFINITIONS -->
    <bean class="gob.shcp.fsn.service.factory.holder.JdbcDAOQueriesHolder">
        <property name="jdbcDAOQueryDefinitions">
            <props>
                <!--Paso 1: Busca los empleados actualizados diferentes a lo que tiene el archivo y que se encuentra en la tabla temporal-->
                <prop key="selectMeritoActualizaRfcContrArchivo">
                    select archivo.tn_nmp_rfc as dice, e.rfc_unico as debe_decir 
                    from tn_nm_plantilla archivo, td_empleado e 
                    where archivo.tn_nmp_rfc = e.rfc_empleado 
                    and archivo.tn_nmp_rfc <![CDATA[<>]]> e.rfc_unico
                </prop>
                
                <!--Paso 2: Actualiza las diferencias encontradas en la tambla temporal, es decir, se actualiza el RFC que contiene el archivo-->
                <prop key="updateMeritoActualizaRfcContrArchivo">
                   update tn_nm_plantilla set tn_nmp_rfc = ? where tn_nmp_rfc = ? and tn_nmp_op = ?
                </prop>
                
                <!--Paso 3: Busca los empleados actualizados diferentes contra la tabla de histórico (Empleado Vs Histórico)-->
                <prop key="selectMeritoActualizaRfcContraHistorico">
                    select h.nmh_rfc_unico as dice, e.rfc_unico as debe_decir 
                    from td_nm_historico h, td_empleado e  
                    where h.nmh_rfc_unico = e.rfc_empleado
                    and h.nmh_rfc_unico <![CDATA[<>]]> e.rfc_unico 
                </prop>
                
                <!--Paso 4: Si encuentra diferencias actualiza el rfc de la tabla de Histórico-->
                <prop key="updateMeritoActualizaRfcHistorico">
                   update td_nm_historico set nmh_rfc_unico=? where nmh_rfc_unico=?
                </prop>
                
                <!--Paso 5: Busca los empleados actualizados diferentes contra la tabla de resúmen (Empleado Vs Resúmen)-->
                <prop key="selectMeritoActualizaRfcContraResumen">
                    select r.NMR_RFC as dice, e.rfc_unico as debe_decir 
                    from td_nm_resumen r, td_empleado e
                    where r.NMR_RFC = e.rfc_empleado
                    and r.NMR_RFC <![CDATA[<>]]> e.rfc_unico 
                </prop>
                
                <!--Paso 6: Si encuentra diferencias actualiza el rfc de la tabla de Resúmen-->
                <prop key="updateMeritoActualizaRfcProcesoNmResumen">
                   update td_nm_resumen set nmr_rfc = ? where nmr_rfc = ?
                </prop>
                
                <!--Paso 7: Consultamos la tabla temporal y la volvemos a carga a memoria en los objetos como fueron leidos en el archivo a través de la clase NotaDeMeritoDTO-->
                <prop key="selectPlantillaMerito">
                    select tn_nmp_id, tn_nmp_tipo_carga, tn_nmp_fecha_carga, tn_nmp_rfc, tn_nmp_nombre, tn_nmp_unidad, tn_nmp_puesto, tn_nmp_plaza, tn_nmp_nivel, 
                    tn_nmp_curso, tn_nmp_denominacion, tn_nmp_inicio, tn_nmp_termino, tn_nmp_duracion, tn_nmp_tipo_puesto, tn_nmp_genero, tn_nmp_estatus, tn_nmp_mes, tn_nmp_op 
                    from tn_nm_plantilla 
                    where tn_nmp_op = ?
                </prop>
                
                <prop key="updateMeritoActualizaRfcResumen">
                   update td_nm_resumen set NMR_RFC = ? where NMR_RFC = ?
                </prop>
                <prop key="selectMeritoActualizaRfcProcesoNmHistorico">
                    select h.nmh_rfc_unico as dice, e.rfc_unico as debe_decir 
                    from td_nm_historico h, td_empleado e  
                    where h.nmh_rfc_unico = e.rfc_empleado and h.nmh_rfc_unico  <![CDATA[<>]]> e.rfc_unico
                </prop>
                <prop key="updateMeritoActualizaRfcProcesoNmHistorico">
                   update td_nm_historico set nmh_rfc_unico = ? where nmh_rfc_unico = ?
                </prop>
                <prop key="selectMeritoActualizaRfcProcesoNmResumen">
                    select r.nmr_rfc as dice, e.rfc_unico as debe_decir 
                    from td_nm_resumen r, td_empleado e  
                    where r.nmr_rfc = e.rfc_empleado and r.nmr_rfc <![CDATA[<>]]> e.rfc_unico 
                </prop>
                <prop key="tcAnosDeConsecutividadYCausal">
                    select n.NMH_CAUSAL, n.NMH_CICLO 
                    From td_Nm_historico n
                    where n.NMH_RFC_UNICO = ?
                    order by n.NMH_CAUSAL, n.NMH_CICLO
                </prop>
                <prop key="tcAnosDeConsecutividad">
                    select n.NMH_CICLO
                    from td_nm_historico n
                    where n.NMH_RFC_UNICO = ?
                    group by n.NMH_CICLO
                    order by n.NMH_CICLO
                </prop>
                <prop key="tnTdNmHistoricoFindByRfcCausalCiclo">
                    select nmh_rfc  
                    from td_nm_historico 
                    where 
                        nmh_rfc_unico =?
                    and nmh_causal = ? 
                    and nmh_ciclo = ?
                </prop>
                <prop key="tnTdNmHistoricoFindByCiclo">
                    select nmh_rfc  
                    from td_nm_historico 
                    where nmh_ciclo = ?
                </prop>
                <prop key="tnTdNmHistoricoFindByRfcCiclo">
                    select nmh_rfc  
                    from td_nm_historico 
                    where nmh_rfc_unico =? and nmh_ciclo = ?
                </prop>
                <prop key="tnTdNmHistoricoFindByRemesaCausalCiclo">
                    select nmh_rfc  
                    from td_nm_historico 
                    where 
                        nmh_op = ?
                    and nmh_causal = ? 
                    and nmh_ciclo = ?
                </prop>
                
                <prop key="tnTdNmHistoricoFindByCausalCiclo">
                    select  nmh_rfc, 
                            nmh_rfc_unico, 
                            nmh_num_docto, 
                            nmh_causal,
                            nmh_ciclo
                    from td_nm_historico 
                    where 
                        nmh_causal = ? 
                    and nmh_ciclo = ?
                </prop>
                <prop key="selectMaxRemesaPorCicloYCausal">
                    select max(nmh_op_max) + 1  as nmh_op from (
                    select to_number(substr(nmh_op,5))  as nmh_op_max
                    from td_nm_historico 
                    group by nmh_op, nmh_ciclo, nmh_causal
                    having substr(nmh_op,1,3) = 'REM' and  nmh_ciclo=? and nmh_causal=?
                    order by to_number(substr(nmh_op,5)))
                </prop>
            </props>
        </property>
    </bean>
</beans>